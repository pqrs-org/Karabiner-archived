<?xml version="1.0"?>
<root>
  <item>
    <name>Samples for KeyRemap4MacBook Binding Developers</name>
    <appendix>defined in .../include/checkbox/samples.xml</appendix>
    <item>
      <name>SetKeyboardType</name>
      <appendix>Showing __SetKeyboardType__ and KeyboardType::*</appendix>
      <item>
        <name>Set keyboardType = KeyboardType::MACBOOK</name>
        <identifier>remap.samples_setkeyboardtype_macbook</identifier>
        <autogen>__SetKeyboardType__ KeyboardType::MACBOOK</autogen>
      </item>
      <item>
        <name>Set keyboardType = KeyboardType::MACBOOK_3_1</name>
        <identifier>remap.samples_setkeyboardtype_macbook_3_1</identifier>
        <autogen>__SetKeyboardType__ KeyboardType::MACBOOK_3_1</autogen>
      </item>
      <item>
        <name>Set keyboardType = KeyboardType::JIS_MACBOOK_2008</name>
        <identifier>remap.samples_setkeyboardtype_jis_macbook_2008</identifier>
        <autogen>__SetKeyboardType__ KeyboardType::JIS_MACBOOK_2008</autogen>
      </item>
      <item>
        <name>Set keyboardType = KeyboardType::JIS_MACBOOK_2008 on Terminal.app</name>
        <identifier>remap.samples_setkeyboardtype_jis_macbook_2008_terminal</identifier>
        <only>TERMINAL</only>
        <autogen>__SetKeyboardType__ KeyboardType::JIS_MACBOOK_2008</autogen>
      </item>
    </item>

    <item>
      <name>Pass Through Mode</name>
      <appendix>(To "pass through" means to turn off further remapping.)</appendix>
      <item>
        <name>Core - Toggle Passthrough</name>
        <appendix>Change A to toggle "Pass Through Mode"</appendix>
        <appendix>(using KeyCode::VK_CONFIG_TOGGLE_notsave_passthrough and IGNORE_PASSTHROUGH)</appendix>
        <identifier>passthrough.samples</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::A,
          KeyCode::VK_CONFIG_TOGGLE_notsave_passthrough,
          Option::IGNORE_PASSTHROUGH,
        </autogen>
      </item>
      <item>
        <name>Mapping Samples</name>
        <appendix>(mappings to test passthrough)</appendix>
        <appendix>B to C (using __KeyToKey__ and KeyCode::*)</appendix>
        <appendix>Volume Mute to A (using ConsumerKeyCode::VOLUME_MUTE)</appendix>
        <appendix>RightClick+CursorMove to ScrollWheel</appendix>
        <appendix>(using __PointingRelativeToScroll__ and PointingButton::*</appendix>
        <appendix>Hold Left once to select Mission Control</appendix>
        <appendix>(using __HoldingKeyToKey__, KeyCode::MISSION_CONTROL, NOREPEAT)</appendix>
        <appendix>Simultaneous Key Presses [D+F] to Escape</appendix>
        <appendix>(using __SimultaneousKeyPresses__)</appendix>
        <identifier>remap.samples_passthrough</identifier>
        <autogen>__ShowStatusMessage__ Mapping Samples Active</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::C</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_MUTE, KeyCode::A</autogen>
        <autogen>__PointingRelativeToScroll__ PointingButton::RIGHT</autogen>
        <autogen>
          __HoldingKeyToKey__
          PointingButton::LEFT,
          @begin
          PointingButton::LEFT,
          @end
          @begin
          KeyCode::MISSION_CONTROL,
          KeyCode::VK_NONE,
          Option::NOREPEAT,
          @end
        </autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::F, KeyCode::D, KeyCode::ESCAPE</autogen>
      </item>
      <item>
        <name>Disable all settings while you are using Terminal.</name>
        <appendix>(using __PassThrough__ and only)</appendix>
        <identifier>remap.samples_passthrough_terminal</identifier>
        <only>TERMINAL</only>
        <autogen>__PassThrough__</autogen>
      </item>
      <item>
        <name>Disable all settings on Magic Mouse.</name>
        <appendix>(using device_only, DeviceVendor::*, DeviceProduct::*)</appendix>
        <identifier>remap.samples_passthrough_magic_mouse</identifier>
        <device_only>DeviceVendor::APPLE_INC, DeviceProduct::MAGIC_MOUSE</device_only>
        <autogen>__PassThrough__</autogen>
      </item>
    </item>

    <item>
      <name>ShowStatusMessage</name>
      <appendix>(show a message box, usually in lower right corner)</appendix>
      <item>
        <name>Sample1</name>
        <appendix>(using __ShowStatusMessage__)</appendix>
        <identifier>remap.samples_showstatusmessage_sample1</identifier>
        <autogen>__ShowStatusMessage__ Sample1</autogen>
      </item>
      <item>
        <name>Sample2</name>
        <appendix>(shares box with Sample1 if both selected)</appendix>
        <identifier>remap.samples_showstatusmessage_sample2</identifier>
        <autogen>__ShowStatusMessage__ Sample2</autogen>
      </item>
      <item>
        <name>A Long Message Taking Up Most Box Space</name>
        <appendix>(shares box with Sample1 if both selected)</appendix>
        <identifier>remap.samples_showstatusmessage_longmessage</identifier>
        <autogen>__ShowStatusMessage__ A Long Message Taking Up Most Box Space</autogen>
      </item>
      <item>
        <name>A Multiline Message Over Two Lines</name>
        <identifier>remap.samples_showstatusmessage_multilinemessage</identifier>
        <autogen>__ShowStatusMessage__ A Multiline Message Over
Two Lines</autogen>
      </item>
      <item>
      <name>Sample3</name>
        <appendix>(cannot see if box is full)</appendix>
        <identifier>remap.samples_showstatusmessage_sample3</identifier>
        <autogen>__ShowStatusMessage__ Sample3</autogen>
      </item>

      <item>
        <name>(Empty)</name>
        <appendix>(diplays box even when no other message active)</appendix>
        <identifier>remap.samples_showstatusmessage_empty</identifier>
        <autogen>__ShowStatusMessage__</autogen>
      </item>
      <item>
        <name>Lock modifiers and Sticky</name>
        <appendix>(See modifiers if Preferences pane->Status Message tab->Show Sticky Modifiers is checked)</appendix>
        <appendix>Q to Lock Control_L</appendix>
        <appendix>W to Lock Left Button</appendix>
        <appendix>E to Sticky Shift_L</appendix>
        <identifier>remap.samples_showstatusmessage_lock_sticky</identifier>
        <autogen>__KeyToKey__ KeyCode::Q, KeyCode::VK_LOCK_CONTROL_L</autogen>
        <autogen>__KeyToKey__ KeyCode::W, KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::E, KeyCode::VK_STICKY_SHIFT_L</autogen>
      </item>
    </item>

    <item>
      <name>KeyToKey</name>
      <item>
        <name>Standard Remapping</name>
        <appendix>(using __KeyToKey__ and KeyCode::*)</appendix>
        <appendix>A to B</appendix>
        <appendix>S to SHIFT_L</appendix>
        <appendix>SHIFT_L to Return</appendix>
        <appendix>Option_L to Command_L</appendix>
        <identifier>remap.samples_keytokey_standard</identifier>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::S, KeyCode::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, KeyCode::RETURN</autogen>
        <autogen>__KeyToKey__ KeyCode::OPTION_L, KeyCode::COMMAND_L</autogen>
      </item>

      <item>
        <name>Useful macros</name>
        <appendix>(Macros create keyword aliases)</appendix>
        <appendix>Map A+shift to B</appendix>
        <appendix>(using MODIFERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT)</appendix>
        <appendix>MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT is alias to</appendix>
        <appendix>ModifierFlag::SHIFT_L and ModifierFlag::SHIFT_R</appendix>
        <appendix>So this code:</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix>|  &lt;autogen&gt;</appendix>
        <appendix>|    __KeyToKey__</appendix>
        <appendix>|    KeyCode::A, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,</appendix>
        <appendix>|    KeyCode::B,</appendix>
        <appendix>|  &lt;/autogen&gt;</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix>maps to this code:</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix>|  &lt;__KeyToKey__ KeyCode::A, ModifierFlag::SHIFT_L, KeyCode::B&gt;</appendix>
        <appendix>|  &lt; __KeyToKey__ KeyCode::A, ModifierFlag::SHIFT_R, KeyCode::B&gt;</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix></appendix>
        <appendix>Map C+optional modifers to D with same modifiers + E</appendix>
        <appendix>(So "c" to "de" but "C" to "De")</appendix>
        <appendix>Multiple MODIFIERFLAG_* in one definition are replaced with same value.</appendix>
        <appendix>So this code:</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix>|  &lt;autogen&gt;</appendix>
        <appendix>|    __KeyToKey__</appendix>
        <appendix>|    KeyCode::C, MODIFIERFLAGS_ANY,</appendix>
        <appendix>|    KeyCode::D, MODIFIERFLAGS_ANY,</appendix>
        <appendix>|    KeyCode::E,</appendix>
        <appendix>|  &lt;/autogen&gt;</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix>Maps to this code:</appendix>
        <appendix>+--------------------------------------------</appendix>
        <appendix>|  &lt;__KeyToKey__ KeyCode::C, KeyCode::D, KeyCode::E&gt;</appendix>
        <appendix>|  &lt;__KeyToKey__ KeyCode::C, ModifierFlag::SHIFT_L,</appendix>
        <appendix>|      KeyCode::D, ModifierFlag::SHIFT_L, KeyCode::E&gt;</appendix>
        <appendix>|  &lt;__KeyToKey__ KeyCode::C, ModifierFlag::SHIFT_L|ModifierFlag::CONTROL_L,</appendix>
        <appendix>|      KeyCode::D, ModifierFlag::SHIFT_L|ModifierFlag::CONTROL_L, KeyCode::E&gt;</appendix>
        <appendix>|  ... and so on for all combinations of modifier keys</appendix>
        <appendix>+--------------------------------------------</appendix>
        <identifier>remap.samples_keytokey_vk_modifier</identifier>
        <autogen>__KeyToKey__ KeyCode::A, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::C, MODIFIERFLAGS_ANY, KeyCode::D, MODIFIERFLAGS_ANY, KeyCode::E</autogen>
        <autogen>__ShowStatusMessage__ Useful Macros active</autogen>
      </item>

      <item>
        <name>Modifier Key Remappings</name>
        <appendix>(Many example using ModifierFlag::* and MODIFIER_EITHER_LEFT_OR_RIGHT_SHIFT)</appendix>
        <appendix>A to Shift_L+B</appendix>
        <appendix>B to Command_L+Shift_L</appendix>
        <appendix>Shift+C to Space</appendix>
        <appendix>Shift+D to Option_L (notice KeyCode versus ModifierFlag)</appendix>
        <appendix>Shift+E to Control_L+Space</appendix>
        <appendix>Shift+F to Option_L+Shift_L</appendix>
        <appendix>G to CapsLock (to CapsLock)</appendix>
        <appendix>Shift+Control+H to Option_L+Space (uses MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL)</appendix>
        <appendix>Fn+hjkl to Left/Down/Up/Right (Key+Fn to Key) (around KeyPad)</appendix>
        <appendix>S to Shift_L+Shift_R</appendix>
        <appendix>1 to A (only if no Modifiers, using ModifierFlag::NONE)</appendix>
        <appendix>2 to A (if only ModifierFlag == Shift_L)</appendix>
        <appendix>Command+Volume Down to Space (if no other modifiers pressed, uses ConsumerKeyCode:*)</appendix>
        <appendix>RightClick to CapsLock, A (uses PointingButton:*)</appendix>

        <identifier>remap.samples_keytokey_key2xxx</identifier>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::B, ModifierFlag::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::COMMAND_L, ModifierFlag::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::C, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::SPACE</autogen>
        <autogen>__KeyToKey__ KeyCode::D, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::OPTION_L</autogen>
        <autogen>__KeyToKey__ KeyCode::E, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::SPACE, ModifierFlag::CONTROL_L</autogen>
        <autogen>__KeyToKey__ KeyCode::F, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::SHIFT_L, ModifierFlag::OPTION_L</autogen>
        <autogen>__KeyToKey__ KeyCode::G, KeyCode::CAPSLOCK</autogen>
        <autogen>__KeyToKey__ KeyCode::H, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL | MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::SPACE, ModifierFlag::OPTION_L</autogen>
        <autogen>__KeyToKey__ KeyCode::H, ModifierFlag::FN, KeyCode::CURSOR_LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::J, ModifierFlag::FN, KeyCode::CURSOR_DOWN</autogen>
        <autogen>__KeyToKey__ KeyCode::K, ModifierFlag::FN, KeyCode::CURSOR_UP</autogen>
        <autogen>__KeyToKey__ KeyCode::L, ModifierFlag::FN, KeyCode::CURSOR_RIGHT</autogen>
        <autogen>__KeyToKey__ KeyCode::S, KeyCode::SHIFT_R, ModifierFlag::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_1, ModifierFlag::NONE, KeyCode::A</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_2, ModifierFlag::SHIFT_L | ModifierFlag::NONE, KeyCode::A</autogen>
        <autogen>
          __KeyToKey__
          ConsumerKeyCode::VOLUME_DOWN, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
          KeyCode::SPACE,
        </autogen>
        <autogen>
          __KeyToKey__
          <!-- from -->
          PointingButton::RIGHT,
          <!-- to -->
          KeyCode::CAPSLOCK,
          KeyCode::A,
        </autogen>
      </item>

      <item>
        <name>Key Remaps with Many Modifiers</name>
        <appendix>Option+A to Command_L+Shift_L+Tab</appendix>
        <appendix>Option+S to Command_L+Tab</appendix>
        <identifier>remap.samples_keytokey_key2xxx_2</identifier>
        <autogen>__KeyToKey__ KeyCode::A, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION, KeyCode::TAB, ModifierFlag::COMMAND_L | ModifierFlag::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::S, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION, KeyCode::TAB, ModifierFlag::COMMAND_L</autogen>
      </item>

      <item>
        <name>Capslock Modifiers</name>
        <appendix>A to CapsLock</appendix>
        <appendix>CapsLock+S to Shift_L+1</appendix>
        <appendix>CapsLock+O to Option_L+2</appendix>
        <appendix>CapsLock+C to Command_L+3</appendix>
        <appendix></appendix>
        <appendix>Change Shift_L key to turning CapsLock off</appendix>
        <appendix>(Retain Shift_L movement when CapsLock is off)</appendix>
        <appendix>(uses VK_NONE)</appendix>
        <appendix></appendix>
        <appendix>Change Shift_R key to turning CapsLock off</appendix>
        <appendix>(Retain Shift_R movement at all times)</appendix>
        <appendix>(uses &lt;block&gt; and &lt;modifier_only&gt;)</appendix>
        <identifier>remap.samples_keytokey_key2xxx_3</identifier>
        <autogen>__KeyToKey__ KeyCode::A,                               KeyCode::CAPSLOCK</autogen>
        <autogen>__KeyToKey__ KeyCode::S,       ModifierFlag::CAPSLOCK, KeyCode::KEY_1, ModifierFlag::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::O,       ModifierFlag::CAPSLOCK, KeyCode::KEY_2, ModifierFlag::OPTION_L</autogen>
        <autogen>__KeyToKey__ KeyCode::C,       ModifierFlag::CAPSLOCK, KeyCode::KEY_3, ModifierFlag::COMMAND_L</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, ModifierFlag::CAPSLOCK, KeyCode::CAPSLOCK, KeyCode::VK_NONE</autogen>
        <block>
          <modifier_only>ModifierFlag::CAPSLOCK</modifier_only>
          <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::CAPSLOCK, KeyCode::SHIFT_R</autogen>
        </block>
      </item>

      <item>
        <name>Remap with competing rules</name>
        <appendix>A to Shift_L</appendix>
        <appendix>Shift_L+A to B</appendix>
        <identifier>remap.samples_keytokey_key2xxx_4</identifier>
        <autogen>__KeyToKey__ KeyCode::A, ModifierFlag::SHIFT_L, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::A,                        KeyCode::SHIFT_L</autogen>
      </item>

      <item>
        <name>Modifier To Modifier</name>
        <appendix>Shift_R to Command_L+Option_L (Modifier to Modifier+Modifier)</appendix>
        <appendix>Fn+Option_L to Command_L (Modifier+Modifier To Modifier)</appendix>
        <identifier>remap.samples_keytokey_modifier2xxx</identifier>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::COMMAND_L, ModifierFlag::OPTION_L</autogen>
        <autogen>__KeyToKey__ KeyCode::OPTION_L, ModifierFlag::FN, KeyCode::COMMAND_L</autogen>
      </item>

      <item>
        <name>Modifier To XXX(2)</name>
        <appendix>Shift_L to Shift_L (if no other modifiers pressed)</appendix>
        <appendix>Shift_L to Command_L</appendix>
        <appendix>Shift+A to B</appendix>
        <appendix>Shift_R to Shift_R+A (if no other modifiers pressed)</appendix>
        <appendix>Command_L+Command_R to Command_L+Command_R (if no other modifiers pressed)</appendix>
        <appendix>Command_L+Command_R+A to B</appendix>
        <appendix>Command_R to Option_R</appendix>
        <identifier>remap.samples_keytokey_modifier2xxx_2</identifier>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, ModifierFlag::SHIFT_L | ModifierFlag::NONE, KeyCode::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, KeyCode::COMMAND_L</autogen>
        <autogen>__KeyToKey__ KeyCode::A, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R, ModifierFlag::SHIFT_R | ModifierFlag::NONE, KeyCode::A, ModifierFlag::SHIFT_R</autogen>
        <autogen>__KeyToKey__ KeyCode::COMMAND_R, ModifierFlag::COMMAND_L | ModifierFlag::COMMAND_R | ModifierFlag::NONE, KeyCode::COMMAND_R, ModifierFlag::COMMAND_L</autogen>
        <autogen>__KeyToKey__ KeyCode::A, ModifierFlag::COMMAND_L | ModifierFlag::COMMAND_R, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::OPTION_R</autogen>
      </item>

      <item>
        <name>Modifier To XXX(3)</name>
        <appendix>Shift_R to A</appendix>
        <appendix>Shift_L+Shift_R to B</appendix>
        <appendix>Command_R to A</appendix>
        <appendix>Command_L+Command_R to B</appendix>
        <identifier>remap.samples_keytokey_modifier2xxx_3</identifier>
        <!-- including self modifier (ModifierFlag::SHIFT_R) -->
        <autogen>__KeyToKey__ KeyCode::SHIFT_R, ModifierFlag::SHIFT_L | ModifierFlag::SHIFT_R, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R, KeyCode::A</autogen>
        <!-- excluding self modifier (ModifierFlag::COMMAND_R) -->
        <autogen>__KeyToKey__ KeyCode::COMMAND_R, ModifierFlag::COMMAND_L, KeyCode::B</autogen>
        <autogen>__KeyToKey__ KeyCode::COMMAND_R, KeyCode::A</autogen>
      </item>

      <item>
        <name>ConsumerKeyCode to KeyCode</name>
        <appendix>Command+Volume Down to A,S,Shift_L+D,Control_L+F,G</appendix>
        <appendix>Volume Down to A</appendix>
        <appendix>Option+Volume Up to Shift_L (Key+Modifier to Modifier)</appendix>
        <appendix>Shift+Volume Up to B (with Modifier)</appendix>
        <appendix>Volume Up to Control_L (to Modifier)</appendix>
        <appendix>Option+Volume Mute to Shift_L+C (to Key+Modifier)</appendix>
        <appendix>NumLock to A</appendix>
        <!-- Note: -->
        <!-- NumLock is a special key. When we press "A" key with holding NumLock key, there is no key down event occurred -->
        <!-- Therefore we cannot change NumLock to Modifier -->
        <identifier>remap.samples_consumertokey</identifier>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_DOWN, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND, KeyCode::A, KeyCode::S, KeyCode::D, ModifierFlag::SHIFT_L, KeyCode::F, ModifierFlag::CONTROL_L, KeyCode::G</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_DOWN, KeyCode::A</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_UP, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION, KeyCode::SHIFT_L</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_UP, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::B</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_UP, KeyCode::CONTROL_L</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_MUTE, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION, KeyCode::C, ModifierFlag::SHIFT_L</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::NUMLOCK, KeyCode::A</autogen>
      </item>

      <item>
        <name>KeyCode to ConsumerKeyCode</name>
        <appendix>A to Volume Mute</appendix>
        <appendix>Shift+B to Volume Mute (With Modifier)</appendix>
        <appendix>Shift_L to Volume Mute (Modifier To)</appendix>
        <appendix>C to Option_L+Volume Mute (To Key+Modifier)</appendix>
        <appendix>D to Volume Up, Brightness Up</appendix>
        <identifier>remap.samples_keytoconsumer</identifier>
        <autogen>__KeyToKey__ KeyCode::A, ConsumerKeyCode::VOLUME_MUTE</autogen>
        <autogen>__KeyToKey__ KeyCode::B, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, ConsumerKeyCode::VOLUME_MUTE</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, ConsumerKeyCode::VOLUME_MUTE</autogen>
        <autogen>__KeyToKey__ KeyCode::C, ConsumerKeyCode::VOLUME_MUTE, ModifierFlag::OPTION_L</autogen>
        <autogen>__KeyToKey__ KeyCode::D, ConsumerKeyCode::VOLUME_UP, ConsumerKeyCode::BRIGHTNESS_UP</autogen>
      </item>

      <item>
        <name>ConsumerKeyCode to ConsumerKeyCode</name>
        <appendix>Volume Mute to Volume Up</appendix>
        <appendix>Volume Down to Volume Mute</appendix>
        <appendix>Shift+Volume Up to Volume Mute (with Modifier)</appendix>
        <appendix>Music Play to Power</appendix>
        <appendix>NumLock to Volume Mute</appendix>
        <identifier>remap.samples_consumertoconsumer</identifier>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_MUTE, ConsumerKeyCode::VOLUME_UP</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_DOWN, ConsumerKeyCode::VOLUME_MUTE</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_UP, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, ConsumerKeyCode::VOLUME_MUTE</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::MUSIC_PLAY, ConsumerKeyCode::POWER</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::NUMLOCK, ConsumerKeyCode::VOLUME_MUTE</autogen>
      </item>

      <item>
        <name>PointingButton to KeyCode</name>
        <appendix>MiddleClick to Return</appendix>
        <appendix>Option_L+RightClick to Shift_L</appendix>
        <appendix>Command_L+RightClick to A, Shift_L+B, Control_L+C</appendix>
        <appendix>RightClick to Control_L</appendix>
        <appendix>RightClick to Tab (if application == TERMINAL)</appendix>
        <appendix>Control_L+LeftClick to Space</appendix>
        <identifier>remap.samples_pointingbuttontokey</identifier>
        <autogen>__KeyToKey__ PointingButton::MIDDLE, KeyCode::RETURN</autogen>
        <autogen>__KeyToKey__ PointingButton::RIGHT, ModifierFlag::OPTION_L, KeyCode::SHIFT_L</autogen>
        <autogen>__KeyToKey__ PointingButton::RIGHT, ModifierFlag::COMMAND_L, KeyCode::A, KeyCode::B, ModifierFlag::SHIFT_L, KeyCode::C, ModifierFlag::CONTROL_L</autogen>
        <block>
          <only>TERMINAL</only>
          <autogen>__KeyToKey__ PointingButton::RIGHT, KeyCode::TAB</autogen>
        </block>
        <autogen>__KeyToKey__ PointingButton::RIGHT, KeyCode::CONTROL_L</autogen>
        <autogen>__KeyToKey__ PointingButton::LEFT, ModifierFlag::CONTROL_L, KeyCode::SPACE</autogen>
      </item>

      <item>
        <name>KeyCode to PointingButton</name>
        <appendix>A to LeftClick (Standard)</appendix>
        <appendix>S to Double-LeftClick</appendix>
        <appendix>D to Shift_L+LeftClick,RightClick</appendix>
        <appendix>Option_L to LeftClick (Modifier)</appendix>
        <appendix>Shift_R to LeftClick,RightClick (Modifier)</appendix>
        <appendix>Shift+B to RightClick (Key+Modifier)</appendix>
        <appendix>Shift+F to RightClick,MiddleClick (Key+Modifier)</appendix>
        <appendix>Shift+Control_L to RightClick (Modifier+Modifier)</appendix>
        <appendix>Shift+Command_L to RightClick,MiddleClick (Modifier+Modifier)</appendix>
        <appendix>1 to LeftClick</appendix>
        <appendix>2 to MiddleClick</appendix>
        <appendix>3 to RightClick</appendix>
        <appendix>4 to Button4</appendix>
        <appendix>5 to Button5</appendix>
        <appendix>6 to Button6</appendix>
        <appendix>7 to Button7</appendix>
        <appendix>8 to Button8</appendix>
        <appendix>Q to Button9</appendix>
        <appendix>W to Button10</appendix>
        <appendix>E to Button11</appendix>
        <appendix>R to Button12</appendix>
        <appendix>T to Button13</appendix>
        <appendix>Y to Button14</appendix>
        <appendix>U to Button15</appendix>
        <appendix>I to Button16</appendix>
        <identifier>remap.samples_keytopointingbutton</identifier>
        <autogen>__KeyToKey__ KeyCode::A, PointingButton::LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::S, PointingButton::LEFT, PointingButton::LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::D, PointingButton::LEFT, ModifierFlag::SHIFT_L, PointingButton::RIGHT</autogen>
        <autogen>__KeyToKey__ KeyCode::OPTION_L, PointingButton::LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R,  PointingButton::LEFT, PointingButton::RIGHT</autogen>
        <autogen>__KeyToKey__ KeyCode::B, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, PointingButton::RIGHT</autogen>
        <autogen>__KeyToKey__ KeyCode::F, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, PointingButton::RIGHT, PointingButton::MIDDLE</autogen>
        <autogen>__KeyToKey__ KeyCode::CONTROL_L, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, PointingButton::RIGHT</autogen>
        <autogen>__KeyToKey__ KeyCode::COMMAND_L, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, PointingButton::RIGHT, PointingButton::MIDDLE</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_1, PointingButton::LEFT</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_2, PointingButton::MIDDLE</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_3, PointingButton::RIGHT</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_4, PointingButton::BUTTON4</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_5, PointingButton::BUTTON5</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_6, PointingButton::BUTTON6</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_7, PointingButton::BUTTON7</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_8, PointingButton::BUTTON8</autogen>
        <autogen>__KeyToKey__ KeyCode::Q,     PointingButton::BUTTON9</autogen>
        <autogen>__KeyToKey__ KeyCode::W,     PointingButton::BUTTON10</autogen>
        <autogen>__KeyToKey__ KeyCode::E,     PointingButton::BUTTON11</autogen>
        <autogen>__KeyToKey__ KeyCode::R,     PointingButton::BUTTON12</autogen>
        <autogen>__KeyToKey__ KeyCode::T,     PointingButton::BUTTON13</autogen>
        <autogen>__KeyToKey__ KeyCode::Y,     PointingButton::BUTTON14</autogen>
        <autogen>__KeyToKey__ KeyCode::U,     PointingButton::BUTTON15</autogen>
        <autogen>__KeyToKey__ KeyCode::I,     PointingButton::BUTTON16</autogen>
      </item>

      <item>
        <name>KeyCode to Modifier+PointingButton</name>
        <appendix>Escape to Command_L+LeftClick</appendix>
        <appendix></appendix>
        <appendix>Events should be following order.</appendix>
        <appendix></appendix>
        <appendix>eventType:keyMod    name:Command_L flags:Cmd</appendix>
        <appendix>eventType:mouseDown name:left      flags:Cmd</appendix>
        <appendix>eventType:mouseUp   name:left      flags:Cmd</appendix>
        <appendix>eventType:keyMod    name:Command_L flags:</appendix>
        <identifier>remap.samples_keytopointingbutton_modifier</identifier>
        <autogen>__KeyToKey__ KeyCode::ESCAPE, PointingButton::LEFT, ModifierFlag::COMMAND_L</autogen>
      </item>

      <item><name>──────────────────────────────</name></item>
      <item>
        <name>PointingButton to PointingButton</name>
      </item>
      <item>
        <name>RightClick to MiddleClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_r2m</identifier>
        <autogen>__KeyToKey__ PointingButton::RIGHT, PointingButton::MIDDLE</autogen>
      </item>
      <item>
        <name>RightClick to Command_L+LeftClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_r2cl</identifier>
        <autogen>
          __KeyToKey__
          PointingButton::RIGHT,
          PointingButton::LEFT, ModifierFlag::COMMAND_L
        </autogen>
      </item>
      <item>
        <name>Option+LeftClick to Option+RightClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_ol2or</identifier>
        <autogen>
          __KeyToKey__
          PointingButton::LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION,
          PointingButton::RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION
        </autogen>
      </item>
      <item>
        <name>Option+LeftClick to MiddleClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_ol2m</identifier>
        <autogen>__KeyToKey__ PointingButton::LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION, PointingButton::MIDDLE</autogen>
      </item>
      <item>
        <name>Fn+LeftClick to Option_L+LeftClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_fl2ol</identifier>
        <autogen>__KeyToKey__ PointingButton::LEFT, ModifierFlag::FN, PointingButton::LEFT, ModifierFlag::OPTION_L</autogen>
      </item>
      <item>
        <name>RightClick to Double-LeftClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_r2dl</identifier>
        <autogen>__KeyToKey__ PointingButton::RIGHT, PointingButton::LEFT, PointingButton::LEFT</autogen>
      </item>
      <item>
        <name>RightClick to Shift_L+LeftClick, LeftClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_r2sll</identifier>
        <autogen>__KeyToKey__ PointingButton::RIGHT, PointingButton::LEFT, ModifierFlag::SHIFT_L, PointingButton::LEFT</autogen>
      </item>
      <item>
        <name>RightClick to Shift_L+LeftClick, RightClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_r2slr</identifier>
        <autogen>__KeyToKey__ PointingButton::RIGHT, PointingButton::LEFT, ModifierFlag::SHIFT_L, PointingButton::RIGHT</autogen>
      </item>
      <item>
        <name>Control+RightClick to Double-LeftClick</name>
        <identifier>remap.samples_pointingbuttontopointingbutton_cr2dl</identifier>
        <autogen>__KeyToKey__ PointingButton::RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, PointingButton::LEFT, PointingButton::LEFT</autogen>
      </item>
      <item><name>──────────────────────────────</name></item>

      <item>
        <name>Combination</name>
        <appendix>A to B,C (Standard)</appendix>
        <appendix>B to A,B,Shift_L+C,D,Control_L+P (Key To)</appendix>
        <appendix>C to JIS_KANA,A,I,JIS_EISUU,U (Key To with Japanese)</appendix>
        <appendix>Shift_L to A,B,Control_L+B,Shift_L+C,D (Modifier To)</appendix>
        <appendix>Control+D to Shift_L+A, Control_L+F (Key+Modifier To)</appendix>
        <appendix>E to Type "https://pqrs.org/macosx/keyremap4macbook/"</appendix>
        <appendix>F to CapsLock,A,S,D,CapsLock</appendix>
        <appendix>G to Option_L,Shift_L,A,S</appendix>
        <appendix>Volume Mute to Volume Up,Brightness Up</appendix>
        <appendix></appendix>
        <appendix>H to A,KeyCode::VK_NONE</appendix>
        <appendix>(KeyDown and KeyUp will be fired at the same time when H key is pressed)</appendix>
        <identifier>remap.samples_keytokey_combination</identifier>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::B, KeyCode::C</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::A, KeyCode::B, KeyCode::C, ModifierFlag::SHIFT_L, KeyCode::D, KeyCode::P, ModifierFlag::CONTROL_L</autogen>
        <autogen>__KeyToKey__ KeyCode::C, KeyCode::JIS_KANA, KeyCode::A, KeyCode::I, KeyCode::JIS_EISUU, KeyCode::U</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, KeyCode::A, KeyCode::B, KeyCode::B, ModifierFlag::CONTROL_L, KeyCode::C, ModifierFlag::SHIFT_L, KeyCode::D</autogen>
        <autogen>__KeyToKey__ KeyCode::D, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, KeyCode::A, ModifierFlag::SHIFT_L, KeyCode::F, ModifierFlag::CONTROL_L</autogen>
        <autogen>
          __KeyToKey__
          KeyCode::E, ModifierFlag::NONE,
          KeyCode::H, KeyCode::T, KeyCode::T, KeyCode::P, KeyCode::S,
          KeyCode::SEMICOLON, ModifierFlag::SHIFT_L, KeyCode::SLASH, KeyCode::SLASH,
          KeyCode::P, KeyCode::Q, KeyCode::R, KeyCode::S,
          KeyCode::DOT,
          KeyCode::O, KeyCode::R, KeyCode::G,
          KeyCode::SLASH,
          KeyCode::M, KeyCode::A, KeyCode::C, KeyCode::O, KeyCode::S, KeyCode::X,
          KeyCode::SLASH,
          KeyCode::K, KeyCode::E, KeyCode::Y, KeyCode::R, KeyCode::E, KeyCode::M, KeyCode::A, KeyCode::P,
          KeyCode::KEY_4,
          KeyCode::M, KeyCode::A, KeyCode::C, KeyCode::B, KeyCode::O, KeyCode::O, KeyCode::K,
          KeyCode::SLASH
        </autogen>
        <autogen>__KeyToKey__ KeyCode::F, KeyCode::CAPSLOCK, KeyCode::A, KeyCode::S, KeyCode::D, KeyCode::CAPSLOCK</autogen>
        <autogen>__KeyToKey__ KeyCode::G, KeyCode::OPTION_L, KeyCode::SHIFT_L, KeyCode::A, KeyCode::S</autogen>
        <autogen>
          __KeyToKey__
          ConsumerKeyCode::VOLUME_MUTE,
          ConsumerKeyCode::VOLUME_UP,
          ConsumerKeyCode::BRIGHTNESS_UP,
        </autogen>
        <autogen>__KeyToKey__ KeyCode::H, KeyCode::A, KeyCode::VK_NONE</autogen>
      </item>

      <item>
        <name>Combination (2)</name>
        <appendix>A to A,S,Shift_L (Shift_L is active while we're pressing A key)</appendix>
        <appendix>Shift_R to A,S,Control_L (Control_L is active while we're pressing Shift_R key)</appendix>
        <appendix>Command+B to A,S,Shift_L (Shift_L is active while we're pressing B key)</appendix>
        <appendix>Control_L+Option_L to A,S,Shift_L (Shift_L is active while we're pressing Option_L key)</appendix>
        <identifier>remap.samples_keytokey_combination1</identifier>
        <autogen>__KeyToKey__ KeyCode::A,                                 KeyCode::A, KeyCode::S, KeyCode::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::SHIFT_R,                           KeyCode::A, KeyCode::S, KeyCode::CONTROL_L</autogen>
        <autogen>__KeyToKey__ KeyCode::B,        MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND,              KeyCode::A, KeyCode::S, KeyCode::SHIFT_L</autogen>
        <autogen>__KeyToKey__ KeyCode::OPTION_L, ModifierFlag::CONTROL_L, KeyCode::A, KeyCode::S, KeyCode::SHIFT_L</autogen>
      </item>

      <item>
        <name>Combination(3)</name>
        <appendix>Shift_L to A,Shift_L+S,D (if no other modifiers pressed)</appendix>
        <appendix>Command+A to Volume Mute (if no other modifiers pressed)</appendix>
        <identifier>remap.samples_keytokey_combination_3</identifier>
        <autogen>__KeyToKey__ KeyCode::SHIFT_L, ModifierFlag::SHIFT_L | ModifierFlag::NONE, KeyCode::A, KeyCode::S, ModifierFlag::SHIFT_L, KeyCode::D</autogen>
        <autogen>
          __KeyToKey__
          KeyCode::A, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND | ModifierFlag::NONE,
          ConsumerKeyCode::VOLUME_MUTE,
        </autogen>
      </item>

      <item>
        <name>Combination(4)</name>
        <appendix>A to CapsLock,A,S</appendix>
        <appendix>// This has a issue with key repeat.</appendix>
        <appendix>// In key repeat, CapsLock status is not changed.</appendix>
        <identifier>remap.samples_keytokey_combination_4</identifier>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::CAPSLOCK, KeyCode::A, KeyCode::S</autogen>
      </item>

      <item>
        <name>NoRepeat</name>
        <appendix>1 to A (with Option::NOREPEAT)</appendix>
        <appendix>2 to A,B,C (with Option::NOREPEAT)</appendix>
        <appendix>3 to Shift_L (with Option::NOREPEAT)</appendix>
        <appendix>A to Volume Up (with Option::NOREPEAT)</appendix>
        <appendix>Volume Mute to Volume Up,Brightness Up (with NoRepeat)</appendix>
        <appendix>Volume Down to A (with Option::NOREPEAT)</appendix>
        <appendix>Volume Up to Volume Down (with NoRepeat)</appendix>
        <appendix>RightClick to A (with Option::NOREPEAT)</appendix>
        <identifier>remap.samples_keytokey_norepeat</identifier>
        <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::A, Option::NOREPEAT</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::A, KeyCode::B, KeyCode::C, Option::NOREPEAT</autogen>
        <autogen>__KeyToKey__ KeyCode::KEY_3, KeyCode::SHIFT_L, Option::NOREPEAT</autogen>
        <autogen>
          __KeyToKey__
          ConsumerKeyCode::VOLUME_MUTE,
          ConsumerKeyCode::VOLUME_UP,
          ConsumerKeyCode::BRIGHTNESS_UP,
          Option::NOREPEAT,
        </autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_DOWN, KeyCode::A, Option::NOREPEAT</autogen>
        <autogen>__KeyToKey__ ConsumerKeyCode::VOLUME_UP, ConsumerKeyCode::VOLUME_DOWN, Option::NOREPEAT</autogen>
        <autogen>__KeyToKey__ PointingButton::RIGHT, KeyCode::A, Option::NOREPEAT</autogen>
        <autogen>__KeyToKey__ KeyCode::A, ConsumerKeyCode::VOLUME_UP, Option::NOREPEAT</autogen>
      </item>

      <item>
        <name>DelayUntilRepeat, KeyRepeat</name>
        <appendix>1 to A (with DelayUntilRepeat::RawValue::0, KeyRepeat::RawValue::0)</appendix>
        <appendix>Volume Down to A (with DelayUntilRepeat::RawValue::0, KeyRepeat::RawValue::0)</appendix>
        <appendix>RightClick to A (with DelayUntilRepeat::RawValue::0, KeyRepeat::RawValue::0)</appendix>
        <identifier>remap.samples_keytokey_delayuntilrepeat</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::KEY_1,
          KeyCode::A,
          DelayUntilRepeat::RawValue::0,
          KeyRepeat::RawValue::0,
        </autogen>
        <autogen>
          __KeyToKey__
          ConsumerKeyCode::VOLUME_DOWN,
          KeyCode::A,
          DelayUntilRepeat::RawValue::0,
          KeyRepeat::RawValue::0,
        </autogen>
        <autogen>
          __KeyToKey__
          PointingButton::RIGHT,
          KeyCode::A,
          DelayUntilRepeat::RawValue::0,
          KeyRepeat::RawValue::0,
        </autogen>
      </item>

      <item>
        <name>BeforeKeyDown, AfterKeyUp</name>
        <appendix>1 to A (BeforeKeyDown Return, AfterKeyUp Tab)</appendix>
        <appendix>Shift_R to A (BeforeKeyDown Control+B,C AfterKeyUp Option+D,E)</appendix>
        <appendix></appendix>
        <appendix>Control_L+2 to Control+Option+A</appendix>
        <appendix>(BeforeKeyDown Shift+B,C AfterKeyUp Option+D,E,Control+F)</appendix>
        <appendix></appendix>
        <appendix>Control_L+Shift_L to A,B</appendix>
        <appendix>(BeforeKeyDown C AfterKeyUp D)</appendix>
        <appendix></appendix>
        <appendix>Change Input Source while pressing right option key.</appendix>
        <appendix>(Sending Command+Space when pressing/releasing right option key.)</appendix>
        <appendix></appendix>
        <appendix>SimultaneousKeyPresses S+D to B.</appendix>
        <appendix>(BeforeKeyDown C, AfterKeyUp D)</appendix>
        <appendix></appendix>
        <appendix>Volume Mute to B.</appendix>
        <appendix>(BeforeKeyDown C, AfterKeyUp D)</appendix>
        <appendix></appendix>
        <appendix>Right Click to B.</appendix>
        <appendix>(BeforeKeyDown C, AfterKeyUp D)</appendix>
        <identifier>remap.samples_keytokey_beforekeydown</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::KEY_1, KeyCode::A,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::RETURN,
          Option::KEYTOKEY_AFTER_KEYUP, KeyCode::TAB
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::SHIFT_R, KeyCode::A,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::B, ModifierFlag::CONTROL_L, KeyCode::C,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::D, ModifierFlag::OPTION_L,  KeyCode::E
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::KEY_2, ModifierFlag::CONTROL_L, KeyCode::A, ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::B, ModifierFlag::SHIFT_R,  KeyCode::C,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::D, ModifierFlag::OPTION_L, KeyCode::E, KeyCode::F, ModifierFlag::CONTROL_L
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::SHIFT_L, ModifierFlag::CONTROL_L, KeyCode::A, KeyCode::B,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::C,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::D
        </autogen>
        <!-- Hack: Sending Command_L key event after send Command+Space to release Command key -->
        <autogen>
          __KeyToKey__
          KeyCode::OPTION_R, KeyCode::VK_NONE,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::SPACE, ModifierFlag::COMMAND_L, KeyCode::COMMAND_L,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::SPACE, ModifierFlag::COMMAND_L, KeyCode::COMMAND_L
        </autogen>
        <autogen>
          __SimultaneousKeyPresses__
          KeyCode::S, KeyCode::D,
          KeyCode::B,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::C,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::D,
        </autogen>
        <autogen>
          __KeyToKey__
          ConsumerKeyCode::VOLUME_MUTE,
          KeyCode::B,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::C,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::D,
        </autogen>
        <autogen>
          __KeyToKey__
          PointingButton::RIGHT,
          KeyCode::B,
          Option::KEYTOKEY_BEFORE_KEYDOWN, KeyCode::C,
          Option::KEYTOKEY_AFTER_KEYUP,    KeyCode::D,
        </autogen>
      </item>

      <item>
        <name>Apply from the top sequentially.</name>
        <appendix>1 to A</appendix>
        <appendix>1 to B (skipped)</appendix>
        <appendix>2 to B </appendix>
        <appendix>2 to C (skipped)</appendix>
        <identifier>remap.samples_keytokey_apply_from_to_top</identifier>
        <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::A</autogen>
        <block>
          <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::B</autogen>
          <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::B</autogen>
        </block>
        <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::C</autogen>
      </item>

      <item>
        <name>Apply from the top sequentially (&lt;list&gt; and &lt;item&gt;)</name>
        <appendix>(Turn on all settings. The settings labeled "skipped" will be ignored.)</appendix>
        <item>
          <name>1 to A</name>
          <identifier>remap.samples_keytokey_apply_from_to_top_item1</identifier>
          <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::A</autogen>
        </item>
        <item>
          <name>list</name>
          <item>
            <name>1 to B (skipped)</name>
            <identifier>remap.samples_keytokey_apply_from_to_top_item2</identifier>
            <autogen>__KeyToKey__ KeyCode::KEY_1, KeyCode::B</autogen>
          </item>
          <item>
            <name>2 to B</name>
            <identifier>remap.samples_keytokey_apply_from_to_top_item3</identifier>
            <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::B</autogen>
          </item>
        </item>
        <item>
          <name>2 to C (skipped)</name>
          <identifier>remap.samples_keytokey_apply_from_to_top_item4</identifier>
          <autogen>__KeyToKey__ KeyCode::KEY_2, KeyCode::C</autogen>
        </item>
      </item>
    </item>

    <item>
      <name>KeyOverlaidModifier</name>
      <item>
        <name>Standard</name>
        <appendix>A to Shift_L (When type only, send Space) (Standard)</appendix>
        <appendix>Option_L to Shift_L (When type only, send Space) (Modifier)</appendix>
        <appendix>Control+B to Shift_L (When type only, send Space) (Key+Modifier)</appendix>
        <appendix>C to Shift_L (When type only, send Space) + [KeyRepeat]</appendix>
        <appendix>Command+D to Shift_L (When type only, send Control_L+F) + [KeyRepeat]</appendix>
        <appendix>E to KeyCode::VK_NONE</appendix>
        <appendix>F to Shift_L (When type only, send CapsLock)</appendix>
        <appendix>G to Shift_L (When type only, send A,B,Shift_L+C,Control_L+B)</appendix>
        <appendix>H to Shift_L (When type only, send A,B,Shift_L+C,Control_L+B) + [KeyRepeat]</appendix>
        <appendix>I to Shift_L (When type only, send Option_L)</appendix>
        <appendix>J to Shift_L+Option_L (When type only, send Space)</appendix>
        <appendix>Command_R to Shift_L (Without other modifiers) (When type only, send Space)</appendix>
        <identifier>remap.samples_keyoverlaidmodifier</identifier>
        <autogen>__KeyOverlaidModifier__ KeyCode::A, KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::OPTION_L, KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::B, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
        <autogen>__KeyOverlaidModifierWithRepeat__ KeyCode::C, KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
        <autogen>__KeyOverlaidModifierWithRepeat__ KeyCode::D, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND, KeyCode::SHIFT_L, KeyCode::F, ModifierFlag::CONTROL_L</autogen>
        <autogen>__KeyToKey__ KeyCode::E, KeyCode::VK_NONE</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::F, KeyCode::SHIFT_L, KeyCode::CAPSLOCK</autogen>
        <autogen>__KeyOverlaidModifier__           KeyCode::G, KeyCode::SHIFT_L, KeyCode::A, KeyCode::B, KeyCode::C, ModifierFlag::SHIFT_L, KeyCode::B, ModifierFlag::CONTROL_L</autogen>
        <autogen>__KeyOverlaidModifierWithRepeat__ KeyCode::H, KeyCode::SHIFT_L, KeyCode::A, KeyCode::B, KeyCode::C, ModifierFlag::SHIFT_L, KeyCode::B, ModifierFlag::CONTROL_L</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::I, KeyCode::SHIFT_L, KeyCode::OPTION_L</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::J, KeyCode::SHIFT_L, ModifierFlag::OPTION_L, KeyCode::SPACE</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::COMMAND_R, ModifierFlag::COMMAND_R | ModifierFlag::NONE, KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
      </item>
      <item>
        <name>Standard2</name>
        <appendix>A to Shift_L (Without other modifiers) (When type only, send Space)</appendix>
        <appendix>Command_R to Command_R (Without other modifiers) (When type only, send "command-a")</appendix>
        <identifier>remap.samples_keyoverlaidmodifier2</identifier>
        <autogen>__KeyOverlaidModifier__ KeyCode::A, ModifierFlag::NONE, KeyCode::SHIFT_L, KeyCode::SPACE</autogen>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::COMMAND_R, ModifierFlag::COMMAND_R | ModifierFlag::NONE,
          KeyCode::COMMAND_R,
          KeyCode::A, ModifierFlag::COMMAND_R,
        </autogen>
      </item>

      <!-- ============================================================ -->
      <item>
        <name>With @begin .. @end (1)</name>
        <appendix>Use "a" key to show status message "1" and "2" and left shift key.</appendix>
        <appendix>(Send space if you press only "a" key.)</appendix>
        <identifier>remap.samples_keyoverlaidmodifier_use_separator</identifier>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::A, ModifierFlag::NONE,

          <!--
              You need to put "KeyCode"s between @begin and @end
              when you want to specify multiple KeyCode.
          -->
          @begin
          <!-- hold 'a' -->
          KeyCode::VK_CONFIG_FORCE_ON_notsave_samples_keyoverlaidmodifier_use_separator_1,
          KeyCode::VK_CONFIG_FORCE_ON_notsave_samples_keyoverlaidmodifier_use_separator_2,
          KeyCode::SHIFT_L,

          Option::KEYTOKEY_AFTER_KEYUP,
          KeyCode::VK_CONFIG_FORCE_OFF_notsave_samples_keyoverlaidmodifier_use_separator_1,
          KeyCode::VK_CONFIG_FORCE_OFF_notsave_samples_keyoverlaidmodifier_use_separator_2,
          @end

          @begin
          <!-- release 'a' -->
          KeyCode::SPACE,
          @end
        </autogen>
      </item>
      <item hidden="true">
        <identifier vk_config="true">notsave.samples_keyoverlaidmodifier_use_separator_1</identifier>
        <autogen>__ShowStatusMessage__ 1</autogen>
      </item>
      <item hidden="true">
        <identifier vk_config="true">notsave.samples_keyoverlaidmodifier_use_separator_2</identifier>
        <autogen>__ShowStatusMessage__ 2</autogen>
      </item>
      <!-- ============================================================ -->

      <item>
        <name>With @begin .. @end (2)</name>
        <appendix>Change "a" key "abc" (no repeat).</appendix>
        <appendix>(Send "def" if you press only "a" key.)</appendix>
        <identifier>remap.samples_keyoverlaidmodifier_use_separator_2</identifier>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::A, ModifierFlag::NONE,

          @begin
          <!-- hold 'a' -->
          KeyCode::A,
          KeyCode::B,
          KeyCode::C,

          Option::NOREPEAT,
          @end

          @begin
          <!-- release 'a' -->
          KeyCode::D,
          KeyCode::E,
          KeyCode::F,
          @end
        </autogen>
      </item>

      <item>
        <name>With Option::KEYOVERLAIDMODIFIER_REPEAT_TOKEYS</name>
        <appendix>Change "a" key "abc". (+ repeat tokeys: "123".)</appendix>
        <appendix>(Send "def" if you press only "a" key.)</appendix>
        <appendix></appendix>
        <appendix>Change the right shift key to control-f. (+ repeat tokeys: option-e)</appendix>
        <appendix>(Send "command-a" if you press only the right shift key.)</appendix>
        <appendix></appendix>
        <appendix>Change "s" key "abc". (+ repeat tokeys: "123" + norepeat.)</appendix>
        <appendix>(Send "def" if you press only "a" key.)</appendix>
        <identifier>remap.samples_keyoverlaidmodifier_reepat_tokeys</identifier>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::A,

          @begin
          <!-- hold 'a' -->
          KeyCode::A,
          KeyCode::B,
          KeyCode::C,
          @end

          @begin
          <!-- release 'a' -->
          KeyCode::D,
          KeyCode::E,
          KeyCode::F,
          @end

          Option::KEYOVERLAIDMODIFIER_REPEAT,

          Option::KEYOVERLAIDMODIFIER_REPEAT_TOKEYS,
          @begin
          KeyCode::KEY_1,
          KeyCode::KEY_2,
          KeyCode::KEY_3,
          @end
        </autogen>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::SHIFT_R,
          KeyCode::F, ModifierFlag::CONTROL_L,
          KeyCode::A, ModifierFlag::COMMAND_L,

          Option::KEYOVERLAIDMODIFIER_REPEAT,

          Option::KEYOVERLAIDMODIFIER_REPEAT_TOKEYS,
          KeyCode::E, ModifierFlag::OPTION_L,
        </autogen>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::S,

          @begin
          <!-- hold 'a' -->
          KeyCode::A,
          KeyCode::B,
          KeyCode::C,
          @end

          @begin
          <!-- release 'a' -->
          KeyCode::D,
          KeyCode::E,
          KeyCode::F,
          @end

          Option::KEYOVERLAIDMODIFIER_REPEAT,

          Option::KEYOVERLAIDMODIFIER_REPEAT_TOKEYS,
          @begin
          KeyCode::KEY_1,
          KeyCode::KEY_2,
          KeyCode::KEY_3,
          Option::NOREPEAT,
          @end
        </autogen>
      </item>

      <item>
        <name>With DelayUntilRepeat,KeyRepeat</name>
        <appendix>Change "a" key "abc". (+ repeat tokeys: "1".)</appendix>
        <appendix>(Send "def" if you press only "a" key.)</appendix>
        <appendix>(with DelayUntilRepeat::RawValue::0, KeyRepeat::RawValue::0)</appendix>
        <identifier>remap.samples_keyoverlaidmodifier_delayuntilrepeat</identifier>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::A,

          @begin
          <!-- hold 'a' -->
          KeyCode::A,
          KeyCode::B,
          KeyCode::C,
          @end

          @begin
          <!-- release 'a' -->
          KeyCode::D,
          KeyCode::E,
          KeyCode::F,
          @end

          Option::KEYOVERLAIDMODIFIER_REPEAT,

          Option::KEYOVERLAIDMODIFIER_REPEAT_TOKEYS,
          KeyCode::KEY_1,
          DelayUntilRepeat::RawValue::0,
          KeyRepeat::RawValue::0,
        </autogen>
      </item>

    </item>

    <item>
      <name>HoldingKeyToKey</name>
      <item>
        <name>Standard</name>
        <identifier>remap.samples_holdingkeytokey</identifier>
        <appendix>Escape to Tab (+ Holding Escape to Space)</appendix>
        <appendix>Tab to A,S,Control_L+D,F (+ Holding Tab to Q,W,Shift_L+E,R)</appendix>
        <appendix>Option+Shift_R to Return (+ Holding Option+Shift_R to Space)</appendix>
        <appendix>Shift+A to Option_L+B (+ Holding Shift+A to Command_L+Return)</appendix>
        <appendix>Control+B to Option_L+B,C (+ Holding Control+B to Space)</appendix>
        <appendix>C to Space (+ Holding C to Shift_L)</appendix>
        <appendix>D to Shift_L (+ Holding D to Option_L)</appendix>
        <appendix>Shift+E to Control_L (+ Holding Shift+E to Option_L)</appendix>
        <appendix>Delete to Tab,Tab (+ Holding Escape to Space,Space)</appendix>
        <appendix>Q to Space (+ Holding Q to double-click)</appendix>
        <!-- Note: Use KeyCode::VK_NONE as a separator of parameters -->
        <autogen>__HoldingKeyToKey__ KeyCode::ESCAPE, KeyCode::TAB, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::TAB, KeyCode::A, KeyCode::S, KeyCode::D, ModifierFlag::CONTROL_L, KeyCode::F, KeyCode::VK_NONE, KeyCode::Q, KeyCode::W, KeyCode::E, ModifierFlag::SHIFT_L, KeyCode::R</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::SHIFT_R, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION, KeyCode::RETURN, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::A, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::B, ModifierFlag::OPTION_L, KeyCode::VK_NONE, KeyCode::RETURN, ModifierFlag::COMMAND_L</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::B, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_CONTROL, KeyCode::B, ModifierFlag::OPTION_L, KeyCode::C, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::C, KeyCode::SPACE, KeyCode::VK_NONE, KeyCode::SHIFT_L</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::D, KeyCode::SHIFT_L, KeyCode::VK_NONE, KeyCode::OPTION_L</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::E, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::CONTROL_L, KeyCode::VK_NONE, KeyCode::OPTION_L</autogen>

        <autogen>
          __HoldingKeyToKey__
          KeyCode::DELETE,

          <!-- You can use @begin and @end as a separator of parameters -->

          @begin
          KeyCode::TAB,
          KeyCode::TAB,
          @end

          @begin
          KeyCode::SPACE,
          KeyCode::SPACE,
          @end
        </autogen>

        <autogen>
          __HoldingKeyToKey__
          KeyCode::Q,

          @begin
          KeyCode::SPACE,
          @end

          @begin
          KeyCode::VK_MOUSEKEY_BUTTON_LEFT,
          KeyCode::VK_MOUSEKEY_BUTTON_LEFT,
          KeyCode::VK_NONE,
          Option::NOREPEAT,
          @end
        </autogen>
      </item>
      <item>
        <name>with ModifierFlag::NONE</name>
        <appendix>Escape to Tab (without any modifiers) (+ Holding Escape to Space)</appendix>
        <appendix>Shift_R to Return (without other modifiers) (+ Holding Shift_R to Space)</appendix>
        <identifier>remap.samples_holdingkeytokey_modifierflag_none</identifier>
        <autogen>__HoldingKeyToKey__ KeyCode::ESCAPE, ModifierFlag::NONE, KeyCode::TAB, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::SHIFT_R, ModifierFlag::SHIFT_R | ModifierFlag::NONE, KeyCode::RETURN, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
      </item>
      <item>
        <name>NoRepeat</name>
        <appendix>Escape to Tab (+ Holding Escape to Space)</appendix>
        <appendix>Tab to VK_NONE (+ Holding Tab to Escape)</appendix>
        <identifier>remap.samples_holdingkeytokey_norepeat</identifier>
        <autogen>__HoldingKeyToKey__ KeyCode::ESCAPE, KeyCode::TAB, KeyCode::VK_NONE, KeyCode::SPACE, Option::NOREPEAT</autogen>
        <autogen>__HoldingKeyToKey__ KeyCode::TAB, KeyCode::VK_NONE, KeyCode::ESCAPE, Option::NOREPEAT</autogen>
      </item>
      <item>
        <name>DelayUntilRepeat, KeyRepeat</name>
        <appendix>Escape to Tab (+ Holding Escape to Space)</appendix>
        <appendix>(with DelayUntilRepeat::RawValue::0, KeyRepeat::RawValue::0)</appendix>
        <identifier>remap.samples_holdingkeytokey_delayuntilrepeat</identifier>
        <autogen>
          __HoldingKeyToKey__
          KeyCode::ESCAPE,
          @begin
          KeyCode::TAB,
          @end
          @begin
          KeyCode::SPACE,
          @end
          DelayUntilRepeat::RawValue::0,
          KeyRepeat::RawValue::0,
        </autogen>
      </item>
      <item>
        <name>with ThresholdMillisecond</name>
        <appendix>Escape to Tab (+ Holding Escape to Space for 3 seconds.)</appendix>
        <identifier>remap.samples_holdingkeytokey_ThresholdMillisecond</identifier>
        <autogen>
          __HoldingKeyToKey__
          KeyCode::ESCAPE,
          @begin
          KeyCode::TAB,
          @end
          @begin
          KeyCode::SPACE,
          @end
          ThresholdMillisecond::RawValue::3000,
        </autogen>
      </item>
    </item>

    <item>
      <name>DoublePressModifier</name>
      <item>
        <name>Standard</name>
        <appendix>Shift_L x2 to RETURN</appendix>
        <appendix>(A to Control_L) + (A x2 to Shift_L+RETURN)</appendix>
        <appendix>(Shift+B to Control_L+Option_L) + (Shift+B x2 to A,S,Command_L+D)</appendix>
        <appendix>(C to KeyCode::VK_NONE) + (C x2 to SPACE)</appendix>
        <appendix>(Shift+Z to KeyCode::VK_NONE) + (Shift+Z x2 to SPACE)</appendix>
        <identifier>remap.samples_doublepressmodifier</identifier>
        <autogen>__DoublePressModifier__ KeyCode::SHIFT_L, KeyCode::SHIFT_L, KeyCode::RETURN</autogen>
        <autogen>__DoublePressModifier__ KeyCode::A, KeyCode::CONTROL_L, KeyCode::RETURN, ModifierFlag::SHIFT_L</autogen>
        <autogen>__DoublePressModifier__ KeyCode::B, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::CONTROL_L, ModifierFlag::OPTION_L, KeyCode::A, KeyCode::S, KeyCode::D, ModifierFlag::COMMAND_L</autogen>
        <autogen>__DoublePressModifier__ KeyCode::C, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
        <autogen>__DoublePressModifier__ KeyCode::Z, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::VK_NONE, KeyCode::SPACE</autogen>
      </item>
      <item>
        <name>Standard with @begin .. @end</name>
        <appendix>(A to A,B,C) + (A x2 to 1,2,3)</appendix>
        <identifier>remap.samples_doublepressmodifier_separator</identifier>
        <autogen>
          __DoublePressModifier__
          KeyCode::A,

          @begin
          KeyCode::A,
          KeyCode::B,
          KeyCode::C,
          @end

          @begin
          KeyCode::KEY_1,
          KeyCode::KEY_2,
          KeyCode::KEY_3,
          @end
        </autogen>
      </item>
      <item>
        <name>Extra</name>
        <appendix>KEY_0 x3 to Equal(=)</appendix>
        <appendix>(retain KEY_0)</appendix>
        <identifier>remap.samples_doublepressmodifier_extra</identifier>
        <autogen>__KeyToKey__ KeyCode::KEY_0, ModifierFlag::EXTRA1, KeyCode::EQUAL</autogen>
        <autogen>__DoublePressModifier__ KeyCode::KEY_0, KeyCode::KEY_0, KeyCode::DELETE, KeyCode::DELETE, KeyCode::VK_STICKY_EXTRA1</autogen>
      </item>
    </item>

    <item>
      <name>BlockUntilKeyUp</name>

      <item>
        <name>Standard</name>
        <appendix>* Events are blocked until keys are released when the space key is pressed.</appendix>
        <appendix></appendix>
        <appendix>Input: <![CDATA[  Space down -> T down -> T up -> Space up:  ]]></appendix>
        <appendix>Output:</appendix>
        <appendix>- Space down</appendix>
        <appendix>- T down</appendix>
        <appendix>- T up</appendix>
        <appendix>- Space up</appendix>
        <appendix></appendix>
        <appendix>Input: <![CDATA[  Space down -> T down -> Space up -> T up:  ]]></appendix>
        <appendix>Output:</appendix>
        <appendix>- Space down</appendix>
        <appendix>- Space up</appendix>
        <appendix>- T down</appendix>
        <appendix>- T up</appendix>
        <appendix></appendix>
        <identifier>remap.samples_BlockUntilKeyUp</identifier>
        <autogen>__BlockUntilKeyUp__ KeyCode::SPACE</autogen>
      </item>

      <item>
        <name>With KeyOverlaidModifier</name>
        <appendix>* Change the space key to the left shift key.</appendix>
        <appendix>* Send a space key event when the space key is pressed alone.</appendix>
        <appendix></appendix>
        <appendix>Input: <![CDATA[  Space down -> T down -> T up -> Space up:  ]]></appendix>
        <appendix>Output: Shift+T</appendix>
        <appendix></appendix>
        <appendix>Input: <![CDATA[  Space down -> T down -> Space up -> T up:  ]]></appendix>
        <appendix>Output: Shift, Space, T</appendix>
        <appendix></appendix>
        <identifier>remap.samples_BlockUntilKeyUp_with_KeyOverlaidModifier</identifier>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::SPACE,
          KeyCode::SHIFT_L,
          KeyCode::SPACE,
        </autogen>
        <block>
          <modifier_only>ModifierFlag::SHIFT_L</modifier_only>
          <autogen>__BlockUntilKeyUp__ KeyCode::SPACE</autogen>
        </block>
      </item>

      <item>
        <name>Multiple __BlockUntilKeyUp__</name>
        <appendix>Input: <![CDATA[  A down -> S down -> A up -> D down -> S up -> D up:  ]]></appendix>
        <appendix>Output: A, S, D</appendix>
        <identifier>remap.samples_multiple_BlockUntilKeyUp</identifier>
        <autogen>__KeyOverlaidModifier__ KeyCode::A, KeyCode::VK_MODIFIER_A, KeyCode::A</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::S, KeyCode::VK_MODIFIER_S, KeyCode::S</autogen>
        <autogen>__KeyOverlaidModifier__ KeyCode::D, KeyCode::VK_MODIFIER_D, KeyCode::D</autogen>

        <block>
          <modifier_only>ModifierFlag::A</modifier_only>
          <autogen>__BlockUntilKeyUp__ KeyCode::A</autogen>
        </block>
        <block>
          <modifier_only>ModifierFlag::S</modifier_only>
          <autogen>__BlockUntilKeyUp__ KeyCode::S</autogen>
        </block>
        <block>
          <modifier_only>ModifierFlag::D</modifier_only>
          <autogen>__BlockUntilKeyUp__ KeyCode::D</autogen>
        </block>
      </item>
    </item>

    <item>
      <name>DropKeyAfterRemap</name>
      <item>
        <name>Standard</name>
        <appendix>Drop Tab</appendix>
        <appendix>Drop Shift+Return</appendix>
        <appendix>Change A to Tab (== dropped)</appendix>
        <appendix>Change B to Shift_L+Return (== dropped)</appendix>
        <identifier>remap.samples_dropkeyafterremap</identifier>
        <autogen>__DropKeyAfterRemap__ KeyCode::TAB</autogen>
        <autogen>__DropKeyAfterRemap__ KeyCode::RETURN, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT</autogen>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::TAB</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::RETURN, ModifierFlag::SHIFT_L</autogen>
      </item>
    </item>

    <item>
      <name>DropPointingRelativeCursorMove</name>
      <item>
        <name>Standard</name>
        <appendix>A to toggle DropPointingRelativeCursorMove</appendix>
        <identifier>remap.samples_droppointingrelativecursormove_config</identifier>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::VK_CONFIG_TOGGLE_remap_samples_droppointingrelativecursormove</autogen>
      </item>
      <item>
        <name>Core</name>
        <appendix>(You need enable above setting.)</appendix>
        <identifier vk_config="true">remap.samples_droppointingrelativecursormove</identifier>
        <config_only>remap.samples_droppointingrelativecursormove_config</config_only>
        <autogen>__ShowStatusMessage__ DropCursorMove</autogen>
        <autogen>__DropPointingRelativeCursorMove__</autogen>
      </item>
    </item>

    <item>
      <name>DropScrollWheel</name>
      <item>
        <name>Drop ScrollWheel at Emacs</name>
        <identifier>remap.samples_dropscrollwheel</identifier>
        <only>EMACS</only>
        <autogen>__DropScrollWheel__</autogen>
      </item>
      <item>
        <name>Drop Horizontal Scroll</name>
        <identifier>remap.samples_dropscrollwheel_horizontal_scroll</identifier>
        <autogen>__DropScrollWheel__ Option::DROPSCROLLWHEEL_DROP_HORIZONTAL_SCROLL</autogen>
      </item>
      <item>
        <name>Drop momentum scrolling on safari</name>
        <identifier>remap.samples_dropscrollwheel_momentum_scroll</identifier>
        <only>SAFARI</only>
        <autogen>__DropScrollWheel__ Option::DROPSCROLLWHEEL_DROP_MOMENTUM_SCROLL</autogen>
      </item>
    </item>

    <item>
      <name>FlipPointingRelative</name>
      <item>
        <name>Flip Horizontal and Vertical PointingRelative at Safari</name>
        <identifier>remap.samples_flippointingrelative</identifier>
        <only>SAFARI</only>
        <autogen>
          __FlipPointingRelative__
          Option::FLIPPOINTINGRELATIVE_HORIZONTAL,
          Option::FLIPPOINTINGRELATIVE_VERTICAL,
        </autogen>
      </item>
      <item>
        <name>Flip Horizontal PointingRelative at Safari</name>
        <identifier>remap.samples_flippointingrelative_horizontal</identifier>
        <only>SAFARI</only>
        <autogen>
          __FlipPointingRelative__
          Option::FLIPPOINTINGRELATIVE_HORIZONTAL,
        </autogen>
      </item>
      <item>
        <name>Flip Vertical PointingRelative at Safari</name>
        <identifier>remap.samples_flippointingrelative_vertical</identifier>
        <only>SAFARI</only>
        <autogen>
          __FlipPointingRelative__
          Option::FLIPPOINTINGRELATIVE_VERTICAL,
        </autogen>
      </item>
    </item>

    <item>
      <name>FlipScrollWheel</name>
      <item>
        <name>Flip Horizontal and Vertical ScrollWheel at Safari</name>
        <identifier>remap.samples_flipscrollwheel</identifier>
        <only>SAFARI</only>
        <autogen>
          __FlipScrollWheel__
          Option::FLIPSCROLLWHEEL_HORIZONTAL,
          Option::FLIPSCROLLWHEEL_VERTICAL,
        </autogen>
      </item>
      <item>
        <name>Flip Horizontal ScrollWheel at Safari</name>
        <identifier>remap.samples_flipscrollwheel_horizontal</identifier>
        <only>SAFARI</only>
        <autogen>
          __FlipScrollWheel__
          Option::FLIPSCROLLWHEEL_HORIZONTAL,
        </autogen>
      </item>
      <item>
        <name>Flip Vertical ScrollWheel at Safari</name>
        <identifier>remap.samples_flipscrollwheel_vertical</identifier>
        <only>SAFARI</only>
        <autogen>
          __FlipScrollWheel__
          Option::FLIPSCROLLWHEEL_VERTICAL,
        </autogen>
      </item>
    </item>

    <item>
      <name>IgnoreMultipleSameKeyPress</name>
      <item>
        <name>Standard</name>
        <appendix>Ignore the multiple press of 'A'</appendix>
        <appendix>Ignore the multiple press of 'Shift+B' (with Modifier)</appendix>
        <appendix>Ignore the multiple press of 'Shift+Option+C' (with Modifier)</appendix>
        <identifier>remap.samples_ignoremultiplesamekeypress</identifier>
        <autogen>__IgnoreMultipleSameKeyPress__ KeyCode::A</autogen>
        <autogen>__IgnoreMultipleSameKeyPress__ KeyCode::B, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT</autogen>
        <autogen>__IgnoreMultipleSameKeyPress__ KeyCode::C, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT | MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION</autogen>
      </item>
    </item>

    <item>
      <name>StripModifierFromScrollWheel</name>
      <item>
        <name>Standard</name>
        <appendix>Shift_L+ScrollWheel to ScrollWheel (strip Shift)</appendix>
        <appendix>Option+ScrollWheel to ScrollWheel (strip Option)</appendix>
        <identifier>remap.samples_stripmodifierfromscrollwheel</identifier>
        <autogen>__StripModifierFromScrollWheel__ ModifierFlag::SHIFT_L</autogen>
        <autogen>__StripModifierFromScrollWheel__ MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION</autogen>
      </item>
      <item>
        <name>MODIFIERFLAGS_ANY</name>
        <appendix>Any Modifiers+ScrollWheel to ScrollWheel (strip Any Modifiers)</appendix>
        <identifier>remap.samples_stripmodifierfromscrollwheel_any</identifier>
        <autogen>__StripModifierFromScrollWheel__ MODIFIERFLAGS_ANY</autogen>
      </item>
    </item>

    <item>
      <name>ScrollWheelToScrollWheel</name>
      <item>
        <name>Standard</name>
        <appendix>Shift_L+ScrollWheel to Control_L+ScrollWheel</appendix>
        <identifier>remap.samples_ScrollWheelToScrollWheel</identifier>
        <autogen>__ScrollWheelToScrollWheel__ ModifierFlag::SHIFT_L, ModifierFlag::CONTROL_L</autogen>
      </item>
    </item>

    <item>
      <name>ScrollWheelToKey</name>
      <item>
        <name>Standard</name>
        <appendix>ScrollWheel to Left/Right</appendix>
        <appendix>Shift+ScrollWheel to Option+Up/Down/Left/Right</appendix>
        <identifier>remap.samples_ScrollWheelToKey</identifier>
        <autogen>__ScrollWheelToKey__ ScrollWheel::LEFT,  ModifierFlag::NONE, KeyCode::CURSOR_LEFT</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::RIGHT, ModifierFlag::NONE, KeyCode::CURSOR_RIGHT</autogen>

        <autogen>__ScrollWheelToKey__ ScrollWheel::UP,    MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::CURSOR_UP,    ModifierFlag::OPTION_L</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::DOWN,  MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::CURSOR_DOWN,  ModifierFlag::OPTION_L</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::LEFT,  MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::CURSOR_LEFT,  ModifierFlag::OPTION_L</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L</autogen>
      </item>
      <item>
        <name>Standard (2)</name>
        <appendix>ScrollWheel(Left) to Volume Down</appendix>
        <appendix>ScrollWheel(Right) to Volume Up</appendix>
        <appendix>ScrollWheel(Down) to Left Click</appendix>
        <appendix>ScrollWheel(Up) to Right Click</appendix>
        <identifier>remap.samples_ScrollWheelToKey2</identifier>
        <autogen>__ScrollWheelToKey__ ScrollWheel::LEFT,  ConsumerKeyCode::VOLUME_DOWN</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::RIGHT, ConsumerKeyCode::VOLUME_UP</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::DOWN,  PointingButton::LEFT</autogen>
        <autogen>__ScrollWheelToKey__ ScrollWheel::UP,    PointingButton::RIGHT</autogen>
      </item>
    </item>

    <item>
      <name>SimultaneousKeyPresses</name>
      <item>
        <name>KeyToKey</name>
        <appendix>(A+J to Down)</appendix>
        <appendix>(A+K to Up)</appendix>
        <appendix>(A+S to A,S,A,J)</appendix>
        <appendix>(A+D to A,Shift_L+S,Control_L+D,F)</appendix>
        <appendix>(A+G to Shift_L)</appendix>
        <appendix>(Command_R+[E+R] to Space)</appendix>
        <appendix>(Command_R+[R+T] to Option+Space)</appendix>
        <appendix>(Control_L+[R+T] to Shift_L)</appendix>
        <appendix>(R+T to Delete)</appendix>
        <appendix>(Fn+[K+L] to Space)</appendix>
        <appendix>(Shift_L+Shift_R to Space)</appendix>
        <appendix>(Control_L+Option_L to Fn)</appendix>
        <appendix>Return to Space</appendix>
        <appendix>(Z+X to Return (== to Return))</appendix>
        <appendix>(X+C to Return with Option::SIMULTANEOUSKEYPRESSES_RAW (== to Space))</appendix>
        <appendix>(W+E to Escape if application == TERMINAL)</appendix>
        <appendix>(Q+W to Escape if Input Source == English)</appendix>
        <identifier>remap.samples_simultaneouskeypresses_keytokey</identifier>
        <autogen>__SimultaneousKeyPresses__ KeyCode::J, KeyCode::A, KeyCode::CURSOR_DOWN</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::K, KeyCode::A, KeyCode::CURSOR_UP</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::S, KeyCode::A, KeyCode::A, KeyCode::S, KeyCode::A, KeyCode::J</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::D, KeyCode::A, KeyCode::A, KeyCode::S, ModifierFlag::SHIFT_L, KeyCode::D, ModifierFlag::CONTROL_L, KeyCode::F</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::G, KeyCode::A, KeyCode::SHIFT_L</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::R, KeyCode::E, ModifierFlag::COMMAND_R, KeyCode::SPACE</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::T, KeyCode::R, ModifierFlag::COMMAND_R, KeyCode::SPACE, ModifierFlag::OPTION_L</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::T, KeyCode::R, ModifierFlag::CONTROL_L, KeyCode::SHIFT_L</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::T, KeyCode::R, KeyCode::DELETE</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::L, KeyCode::K, ModifierFlag::FN, KeyCode::SPACE</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::SHIFT_L, KeyCode::SHIFT_R, KeyCode::SPACE</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::CONTROL_L, KeyCode::OPTION_L, KeyCode::FN</autogen>
        <autogen>__KeyToKey__ KeyCode::RETURN, KeyCode::SPACE</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::X, KeyCode::Z, KeyCode::RETURN</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::C, KeyCode::X, KeyCode::RETURN, Option::SIMULTANEOUSKEYPRESSES_RAW</autogen>
        <block>
          <only>TERMINAL</only>
          <autogen>__SimultaneousKeyPresses__ KeyCode::E, KeyCode::W, KeyCode::ESCAPE</autogen>
        </block>
        <block>
          <inputsource_only>ENGLISH</inputsource_only>
          <autogen>__SimultaneousKeyPresses__ KeyCode::W, KeyCode::Q, KeyCode::ESCAPE</autogen>
        </block>
      </item>
      <item>
        <name>ButtonToButton</name>
        <appendix>Shift+LeftClick+RightClick to Button4</appendix>
        <appendix>LeftClick+RightClick to MiddleClick</appendix>
        <identifier>remap.samples_simultaneouskeypresses_buttontobutton</identifier>
        <autogen>__SimultaneousKeyPresses__ PointingButton::LEFT, PointingButton::RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, PointingButton::BUTTON4</autogen>
        <autogen>__SimultaneousKeyPresses__ PointingButton::LEFT, PointingButton::RIGHT, PointingButton::MIDDLE</autogen>
      </item>
      <item>
        <name>KeyToButton</name>
        <appendix>[A+S] to RightClick</appendix>
        <appendix>Shift+[S+D] to MiddleClick</appendix>
        <identifier>remap.samples_simultaneouskeypresses_keytobutton</identifier>
        <autogen>__SimultaneousKeyPresses__ KeyCode::S, KeyCode::A, PointingButton::RIGHT</autogen>
        <autogen>__SimultaneousKeyPresses__ KeyCode::D, KeyCode::S, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, PointingButton::MIDDLE</autogen>
      </item>
      <item>
        <name>ButtonToKey</name>
        <appendix>Shift+LeftClick+RightClick to Space</appendix>
        <appendix>LeftClick+RightClick to Return</appendix>
        <identifier>remap.samples_simultaneouskeypresses_buttontokey</identifier>
        <autogen>__SimultaneousKeyPresses__ PointingButton::LEFT, PointingButton::RIGHT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT, KeyCode::SPACE</autogen>
        <autogen>__SimultaneousKeyPresses__ PointingButton::LEFT, PointingButton::RIGHT, KeyCode::RETURN</autogen>
      </item>
      <item>
        <name>NoRepeat</name>
        <appendix>(A+J to Down)</appendix>
        <appendix>LeftClick+RightClick to Return</appendix>
        <identifier>remap.samples_simultaneouskeypresses_norepeat</identifier>
        <autogen>__SimultaneousKeyPresses__ KeyCode::J, KeyCode::A, KeyCode::CURSOR_DOWN, Option::NOREPEAT</autogen>
        <autogen>__SimultaneousKeyPresses__ PointingButton::LEFT, PointingButton::RIGHT, KeyCode::RETURN, Option::NOREPEAT</autogen>
      </item>
      <item>
        <name>DelayUntilRepeat, KeyRepeat</name>
        <appendix>A+J to Down (with DelayUntilRepeat::RawValue::0, KeyRepeat::RawValue::0)</appendix>
        <identifier>remap.samples_simultaneouskeypresses_delayuntilrepeat</identifier>
        <autogen>
          __SimultaneousKeyPresses__
          @begin
          KeyCode::J, KeyCode::A,
          @end
          KeyCode::CURSOR_DOWN,
          DelayUntilRepeat::RawValue::0,
          KeyRepeat::RawValue::0,
        </autogen>
      </item>
      <item>
        <name>Strict Key Order</name>
        <appendix>[Strict] S+D to Right</appendix>
        <appendix>[Strict] D+S to Left</appendix>
        <appendix>[Strict] D+F to Up</appendix>
        <appendix>[Normal] J+K to Space)</appendix>
        <appendix>[Normal] K+J to Space)</appendix>
        <identifier>remap.samples_simultaneouskeypresses_strict_key_order</identifier>
        <autogen>
          __SimultaneousKeyPresses__
          KeyCode::S, KeyCode::D,
          KeyCode::CURSOR_RIGHT,
          Option::SIMULTANEOUSKEYPRESSES_STRICT_KEY_ORDER
        </autogen>
        <autogen>
          __SimultaneousKeyPresses__
          KeyCode::D, KeyCode::S,
          KeyCode::CURSOR_LEFT,
          Option::SIMULTANEOUSKEYPRESSES_STRICT_KEY_ORDER
        </autogen>
        <autogen>
          __SimultaneousKeyPresses__
          KeyCode::D, KeyCode::F,
          KeyCode::CURSOR_UP,
          Option::SIMULTANEOUSKEYPRESSES_STRICT_KEY_ORDER
        </autogen>
        <autogen>
          __SimultaneousKeyPresses__
          KeyCode::J, KeyCode::K,
          KeyCode::SPACE,
        </autogen>
      </item>
      <item>
        <name>Using more than three keys</name>
        <appendix>(S+D+F to Expose)</appendix>
        <appendix>(Q+W+E+R to Space)</appendix>
        <appendix>(J+K+L to Escape) (Strict Key Order)</appendix>
        <identifier>remap.samples_simultaneouskeypresses_separator</identifier>
        <autogen>
          __SimultaneousKeyPresses__
          @begin
          KeyCode::S, KeyCode::D, KeyCode::F,
          @end

          @begin
          KeyCode::EXPOSE_ALL,
          @end
        </autogen>
        <autogen>
          __SimultaneousKeyPresses__
          @begin
          KeyCode::Q, KeyCode::W, KeyCode::E, KeyCode::R,
          @end

          @begin
          KeyCode::SPACE,
          @end
        </autogen>
        <autogen>
          __SimultaneousKeyPresses__
          @begin
          KeyCode::J, KeyCode::K, KeyCode::L,
          @end

          @begin
          KeyCode::ESCAPE,
          Option::SIMULTANEOUSKEYPRESSES_STRICT_KEY_ORDER,
          @end
        </autogen>
      </item>
      <item>
        <name>Note:</name>
        <appendix>Basically, a sending key will not be modified by other manipulators such as __KeyToKey__.</appendix>
        <appendix>Option::SIMULTANEOUSKEYPRESSES_RAW removes this restriction.</appendix>
        <appendix>This option allows you to modify a sending key once more by __KeyToKey__.</appendix>
        <appendix></appendix>
        <name>──────────────────────────────</name>
        <appendix>For example:</appendix>
        <appendix>A space key event is sent when you press Q and W keys simultaneously with following rules.</appendix>
        <appendix></appendix>
        <appendix>- Simultaneous [Q+W] to Return with Option::SIMULTANEOUSKEYPRESSES_RAW</appendix>
        <appendix>- Return to Space</appendix>
        <appendix></appendix>
        <appendix>__SimultaneousKeyPresses__ changes Q+W to Return and</appendix>
        <appendix>__KeyToKey__ changes Return to Space. So, Q+W becomes a space key event.</appendix>
        <name>──────────────────────────────</name>
        <appendix></appendix>
        <appendix>There are two limitations of Option::SIMULTANEOUSKEYPRESSES_RAW.</appendix>
        <appendix></appendix>
        <appendix>Limitation 1:</appendix>
        <appendix>This option strips modifiers from a sending key.</appendix>
        <appendix>For example, when you use Option::SIMULTANEOUSKEYPRESSES_RAW,</appendix>
        <appendix>"[Q+W] to Shift+Return" acts as "[Q+W] to Return".</appendix>
        <appendix>Please append modifiers to a sending key by __KeyToKey__ or other manipulators.</appendix>
        <appendix></appendix>
        <appendix>Limitation 2:</appendix>
        <appendix>This option does not send multiple keys. Only the first key will be sent.</appendix>
        <appendix>For example, when you use Option::SIMULTANEOUSKEYPRESSES_RAW,</appendix>
        <appendix>"[Q+W] to A,S,D,F" acts as "[Q+W] to A".</appendix>
        <appendix>Please send multiple keys by __KeyToKey__ or other manipulators.</appendix>
      </item>
    </item>

    <item>
      <name>PointingRelativeToScroll</name>
      <item>
        <name>Standard</name>
        <appendix>MiddleClick+CursorMove to ScrollWheel (One Button)</appendix>
        <appendix>Option+CursorMove to ScrollWheel (Modifier)</appendix>
        <appendix>Shift+LeftClick+CursorMove to ScrollWheel (Button+Modifier)</appendix>
        <identifier>remap.samples_pointingrelativetoscroll</identifier>
        <autogen>__PointingRelativeToScroll__ PointingButton::MIDDLE</autogen>
        <autogen>__PointingRelativeToScroll__ PointingButton::NONE, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION</autogen>
        <autogen>__PointingRelativeToScroll__ PointingButton::LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT</autogen>
      </item>
      <item>
        <name>With KeyCode, ConsumerKeyCode</name>
        <appendix>Space+CursorMove to ScrollWheel</appendix>
        <appendix>Left Shift+CursorMove to ScrollWheel (Left Shift will not work as modifier.)</appendix>
        <appendix>Option+Q+CursorMove to ScrollWheel</appendix>
        <appendix>Volume Mute+CursorMove to ScrollWheel</appendix>
        <appendix></appendix>
        <appendix>Difference between KeyCode::SHIFT_L and ModifierFlag::SHIFT_L:</appendix>
        <appendix>* __PointingRelativeToScroll__ KeyCode::SHIFT_L</appendix>
        <appendix>===&gt; Left Shift will not work as modifier.</appendix>
        <appendix>* __PointingRelativeToScroll__ ModifierFlag::SHIFT_L</appendix>
        <appendix>===&gt; Left Shift will work as modifier.</appendix>
        <identifier>remap.samples_pointingrelativetoscroll_keycode</identifier>
        <autogen>__PointingRelativeToScroll__ KeyCode::SPACE</autogen>
        <autogen>__PointingRelativeToScroll__ KeyCode::SHIFT_L</autogen>
        <autogen>__PointingRelativeToScroll__ KeyCode::Q, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION</autogen>
        <autogen>__PointingRelativeToScroll__ ConsumerKeyCode::VOLUME_MUTE</autogen>
      </item>
      <item>
        <name>With ToFlags</name>
        <appendix>Command+CursorMove to Command+ScrollWheel</appendix>
        <appendix>Option+CursorMove to Control+ScrollWheel</appendix>
        <appendix>RightClick+CursorMove to Control+ScrollWheel</appendix>
        <identifier>remap.samples_pointingrelativetoscroll_with_toflags</identifier>
        <autogen>
          __PointingRelativeToScroll__
          MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND,
          Option::POINTINGRELATIVETOSCROLL_TOFLAGS,
          MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_COMMAND
        </autogen>
        <autogen>
          __PointingRelativeToScroll__
          MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION,
          Option::POINTINGRELATIVETOSCROLL_TOFLAGS,
          ModifierFlag::CONTROL_L
        </autogen>
        <autogen>
          __PointingRelativeToScroll__
          PointingButton::RIGHT,
          Option::POINTINGRELATIVETOSCROLL_TOFLAGS,
          ModifierFlag::CONTROL_L
        </autogen>
      </item>
      <item>
        <name>With ToButtons</name>
        <appendix>Change RightClick to MiddleClick</appendix>
        <appendix>+ (RightClick+CursorMove to ScrollWheel)</appendix>
        <appendix></appendix>
        <appendix>Change Shift+LeftClick to Option+A,B</appendix>
        <appendix>+ (Shift+LeftClick+CursorMove to ScrollWheel)</appendix>
        <appendix></appendix>
        <appendix>Change Option+LeftClick to Volume Mute</appendix>
        <appendix>+ (Option+LeftClick+CursorMove to ScrollWheel)</appendix>
        <appendix></appendix>
        <identifier>remap.samples_pointingrelativetoscroll_with_tokeys</identifier>
        <autogen>
          __PointingRelativeToScroll__
          PointingButton::RIGHT,

          Option::POINTINGRELATIVETOSCROLL_TOKEYS,
          PointingButton::MIDDLE,
        </autogen>
        <autogen>
          __PointingRelativeToScroll__
          PointingButton::LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,

          Option::POINTINGRELATIVETOSCROLL_TOKEYS,
          KeyCode::A, ModifierFlag::OPTION_L,
          KeyCode::B,
        </autogen>
        <autogen>
          __PointingRelativeToScroll__
          PointingButton::LEFT, MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION,

          Option::POINTINGRELATIVETOSCROLL_TOKEYS,
          ConsumerKeyCode::VOLUME_MUTE,
        </autogen>
      </item>
      <item>
        <name>SimultaneousKeyPresses</name>
        <appendix>LeftClick+RightClick+CursorMove to ScrollWheel</appendix>
        <identifier>remap.samples_pointingrelativetoscroll_simultaneouskeypresses</identifier>
        <autogen>__SimultaneousKeyPresses__ PointingButton::LEFT, PointingButton::RIGHT, KeyCode::VK_CONFIG_SYNC_KEYDOWNUP_notsave_pointing_relative_to_scroll</autogen>
      </item>
    </item>

    <item>
      <name>PointingRelativeToKey</name>
      <item>
        <name>Standard</name>
        <appendix>CursorMove without modifiers to Arrows</appendix>
        <appendix>Option+CursorMove to Shift+Arrows</appendix>
        <appendix>Shift+CursorMove to Launchpad</appendix>
        <appendix>(You can move pointer by Command+CursorMove)</appendix>
        <identifier>remap.samples_pointingrelativetokey</identifier>

        <autogen>
          __PointingRelativeToKey__
          ModifierFlag::NONE,

          PointingRelative::UP,    KeyCode::CURSOR_UP,
          PointingRelative::DOWN,  KeyCode::CURSOR_DOWN,
          PointingRelative::LEFT,  KeyCode::CURSOR_LEFT,
          PointingRelative::RIGHT, KeyCode::CURSOR_RIGHT,
        </autogen>
        <autogen>
          __PointingRelativeToKey__
          MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_OPTION,

          PointingRelative::UP,    KeyCode::CURSOR_UP,    ModifierFlag::SHIFT_L,
          PointingRelative::DOWN,  KeyCode::CURSOR_DOWN,  ModifierFlag::SHIFT_L,
          PointingRelative::LEFT,  KeyCode::CURSOR_LEFT,  ModifierFlag::SHIFT_L,
          PointingRelative::RIGHT, KeyCode::CURSOR_RIGHT, ModifierFlag::SHIFT_L,
        </autogen>
        <autogen>
          __PointingRelativeToKey__
          MODIFIERFLAG_EITHER_LEFT_OR_RIGHT_SHIFT,

          PointingRelative::UP,    KeyCode::LAUNCHPAD,
          PointingRelative::DOWN,  KeyCode::LAUNCHPAD,
          PointingRelative::LEFT,  KeyCode::LAUNCHPAD,
          PointingRelative::RIGHT, KeyCode::LAUNCHPAD,
        </autogen>
      </item>
      <item>
        <name>Standard (2)</name>
        <appendix>CursorMove to Arrows</appendix>
        <appendix>(+ You can disable this setting by escape key.)</appendix>
        <identifier vk_config="true">remap.samples_pointingrelativetokey2</identifier>

        <autogen>
          __KeyToKey__
          KeyCode::ESCAPE,
          KeyCode::VK_CONFIG_FORCE_OFF_remap_samples_pointingrelativetokey2,
        </autogen>
        <autogen>
          __PointingRelativeToKey__
          PointingRelative::UP,    KeyCode::CURSOR_UP,
          PointingRelative::DOWN,  KeyCode::CURSOR_DOWN,
          PointingRelative::LEFT,  KeyCode::CURSOR_LEFT,
          PointingRelative::RIGHT, KeyCode::CURSOR_RIGHT,
        </autogen>
      </item>
      <item>
        <name>With __KeyOverlaidModifier__</name>
        <appendix>RightClick+CursorMove to Arrows</appendix>
        <identifier>remap.samples_pointingrelativetokey_KeyOverlaidModifier</identifier>

        <autogen>
          __KeyOverlaidModifier__
          PointingButton::RIGHT,

          @begin
          KeyCode::VK_MODIFIER_EXTRA1,
          @end

          @begin
          PointingButton::RIGHT,
          @end
        </autogen>

        <autogen>
          __PointingRelativeToKey__
          ModifierFlag::EXTRA1,

          PointingRelative::UP,    KeyCode::CURSOR_UP,
          PointingRelative::DOWN,  KeyCode::CURSOR_DOWN,
          PointingRelative::LEFT,  KeyCode::CURSOR_LEFT,
          PointingRelative::RIGHT, KeyCode::CURSOR_RIGHT,
        </autogen>
      </item>
    </item>

    <item>
      <name>ForceNumLockOn</name>
      <item>
        <name>Force turn NumLock on at Apple Internal Keyboard (0x05ac,0x021a)</name>
        <identifier>remap.samples_forcenumlockon</identifier>
        <autogen>__ForceNumLockOn__ DeviceVendor::APPLE_COMPUTER, DeviceProduct::APPLE_INTERNAL_KEYBOARD_TRACKPAD_0x021a</autogen>
      </item>
    </item>

    <item>
      <name>"NotSave" keymap overwriting</name>
      <item>
        <name>base mapping</name>
        <appendix>A to toggle notsave.sample</appendix>
        <appendix>B to C</appendix>
        <appendix>(B becomes D when notsave.sample is active)</appendix>
        <identifier>remap.samples_notsave</identifier>
        <autogen>__KeyToKey__ KeyCode::A, KeyCode::VK_CONFIG_TOGGLE_notsave_sample</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::C</autogen>
      </item>
      <item>
        <name>notsave.sample</name>
        <appendix>B to D</appendix>
        <identifier vk_config="true">notsave.sample</identifier>
        <autogen>__ShowStatusMessage__ notsave.sample</autogen>
        <autogen>__KeyToKey__ KeyCode::B, KeyCode::D</autogen>
      </item>
    </item>

    <item>
      <name>&lt;identifier&gt; which contains white space</name>
      <item>
        <name>Standard: &lt;identifier&gt; is "remap.sample change tab to space"</name>
        <appendix>Change Tab to Space</appendix>
        <identifier>
          remap.sample change tab to space
        </identifier>
        <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
      </item>
      <item>
        <name>Filter</name>
        <item>
          <name>Core</name>
          <identifier>
            remap.sample filter core
          </identifier>
        </item>
        <item>
          <name>Change Tab to Space when the above setting is activated.</name>
          <identifier>
            remap.sample change tab to space filter core
          </identifier>
          <config_only>remap.sample filter core</config_only>
          <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
        </item>
      </item>
      <item>
        <name>VK_CONFIG</name>
        <item>
          <name>Change Tab to Space</name>
          <identifier vk_config="true">
            remap.sample change tab to space vk config
          </identifier>
          <autogen>__ShowStatusMessage__ Change Tab to Space</autogen>
          <autogen>__KeyToKey__ KeyCode::TAB, KeyCode::SPACE</autogen>
        </item>
        <item>
          <name>Change A to toggle above setting.</name>
          <identifier>
            remap.sample change a to toggle vk config
          </identifier>
          <autogen>__KeyToKey__ KeyCode::A, KeyCode::VK_CONFIG_TOGGLE_remap_sample change tab to space vk config</autogen>
        </item>
      </item>
    </item>

    <include path="samples/filters.xml" />
    <include path="samples/virtual_keycodes.xml" />

  </item>
</root>
